(* grammar conventions:

- CamelCase is used for NonTerminals
- snake_case is used for terminals
when a NonTerminal introduces a new terminal, it is immediately defined
after that rule.

NonTerminals are defined in the order they are introduced, unless they are
common to more than one NonTerminal. In that case, they are defined at the
bottom of the grammar.

If more than one similar NonTerminals share a terminal, the terminal is defined
before the NonTerminals.

grammar sourced from the railroad diagrams at
https://dbis-uibk.github.io/relax/help#relalg-syntax *)

<S>                          = <whitespace> Command <whitespace>


(*
RAExpression precedence:
-   relation_name
-   Projection, Selection, RenameRelation, RenameColumn, GroupBy, OrderBy
-   CrossProduct, NaturalJoin, Division
-   Intersection
-   Union, Subtraction
*)

<Command>                    = ReadCommand       /
                               ReadAsCommand     /
                               StoreAsCommand    /
                               RenameCommand     /
                               DeleteCommand     /
                               WriteCommand      /
                               WriteAsCommand    /
                               ListCommand       /
                               QuitCommand       /
                               PreprocessCommand /
                               QueryCommand

ReadCommand                  = <"read"> <whitespace> filename
ReadAsCommand                = <"read"> <whitespace> filename <whitespace> <"as"> relation_name
StoreAsCommand               = <"store"> <whitespace> RAExpression <whitespace> <"as"> relation_name
RenameCommand                = <"rename"> <whitespace> relation_name <whitespace> <"to"> <whitespace> relation_name
DeleteCommand                = <"delete"> <whitespace> relation_name
WriteCommand                 = <"write"> <whitespace> relation_name
WriteAsCommand               = <"write"> <whitespace> relation_name <whitespace> <"as"> <whitespace> filename
ListCommand                  = <"list">
QuitCommand                  = <"quit">
PreprocessCommand            = <"preprocess"> RAExpression
QueryCommand                 = RAExpression

<RAExpression>               = Projection                              |
                               Selection                               |
                               RenameRelation                          |
                               RenameColumn                            |
                               OrderBy                                 |
                               GroupBy                                 |
                               LowPrecedenceBinOp

<LowPrecedenceBinOp>         = Union | Subtraction | MidPrecedenceBinOp

<MidPrecedenceBinOp>         = Intersection | HighPrecedenceBinOp

<HighPrecedenceBinOp>        = CrossProduct | InnerJoin | NaturalJoin | Division | relation_name | <lpar> RAExpression <rpar>

(*;;;;;;;;;;;;;;;;;;;;
  ; unary operations ;
  ;;;;;;;;;;;;;;;;;;;;*)

Projection                   = <projection_token> ProjectionBody RAExpression

<ProjectionColumn>           = Column / ExprColumn
<ProjectionBody>             = ProjectionColumn                                     |
                               ProjectionColumn <whitespace> <comma> ProjectionBody

projection_token             = "π" | "pi" | "project" | <whitespace> <projection_token> <whitespace>




Selection                    = <selection_token> ValueExpression RAExpression

selection_token              = "σ" | "sigma" | "select" | <whitespace> <selection_token> <whitespace>





rename_token                 = "ρ" | "rho" | "rename" | <whitespace> <rename_token> <whitespace>

RenameRelation               = <rename_token> relation_name RAExpression




RenameColumn                 = <rename_token> ColToColOrCTCComma <whitespace> RAExpression

(* either a column name to column name (CTC) relationship or a CTC followed by a comma.*)
<ColToColOrCTCComma>         = Column <right_arrow> column_token |
                               Column <right_arrow> column_token <comma> ColToColOrCTCComma 




OrderBy                      = <order_by_token> DirectionalColumn RAExpression

order_by_token               = "τ" | "tau" | "order by" | <whitespace> <order_by_token> <whitespace>

<DirectionalColumn>          = AscendingColumn | DescendingColumn | DirectionalColumn <comma> DirectionalColumn

AscendingColumn              = Column <asc> 

asc                          = "asc" | "ASC" | <whitespace> <asc> <whitespace>

DescendingColumn             = Column <desc>

desc                         = "desc" | "DESC" | <whitespace> <desc> <whitespace>




GroupBy                      = <group_by_token> Aggregate <whitespace> RAExpression |
                               <group_by_token> ColumnOrColumnComma <semicolon> Aggregate <whitespace> RAExpression

group_by_token               = "γ" | "gamma" | "group by" | <whitespace> <group_by_token> <whitespace>

<Aggregate>                  = AggregateCountStar |
                               AggregateCount     |
                               AggregateMin       |
                               AggregateMax       |
                               AggregateSum       |
                               AggregateAvg       |
                               Aggregate <comma> Aggregate

count_token                  = "COUNT" | "count"

AggregateCountStar           = <count_token> <lpar> <star> <rpar> <right_arrow> column_token

AggregateCount               = <count_token> <lpar> Column <rpar> <right_arrow> column_token

AggregateMin                 = <min_token> <lpar> Column <rpar> <right_arrow> column_token

<min_token>                  = "MIN" | "min"

AggregateMax                 = <max_token> <lpar> Column <rpar> <right_arrow> column_token

<max_token>                  = "MAX" | "max"

AggregateSum                 = <sum_token> <lpar> Column <rpar> <right_arrow> column_token

<sum_token>                  = "SUM" | "sum"

AggregateAvg                 = <avg_token> <lpar> Column <rpar> <right_arrow> column_token

<avg_token>                  = "AVG" | "avg"

(*;;;;;;;;;;;;;;;;;;;;;
  ; binary operations ;
  ;;;;;;;;;;;;;;;;;;;;;*)

CrossProduct                 = HighPrecedenceBinOp <cross_product_token> RAExpression

cross_product_token          = "*" | "cross join" | "×" | <whitespace> <cross_product_token> <whitespace>




InnerJoin                  = HighPrecedenceBinOp <inner_join_token> ValueExpression RAExpression

inner_join_token           = "⋈" | "⨝" | "join" | "inner join" | <whitespace> <inner_join_token> <whitespace>




NaturalJoin                  = HighPrecedenceBinOp <natural_join_token> RAExpression

natural_join_token           = "⋈" | "⨝" | "natural join" | <whitespace> <natural_join_token> <whitespace>




Division                     = HighPrecedenceBinOp <division_token> RAExpression

division_token               = "÷" | "/" | <whitespace> <division_token> <whitespace>




Intersection                 = MidPrecedenceBinOp <intersection_token> HighPrecedenceBinOp

intersection_token           = "intersect" | "∩" | <whitespace> <intersection_token> <whitespace>




Union                        = LowPrecedenceBinOp <union_token> MidPrecedenceBinOp

union_token                  = "union" | "∪" | <whitespace> <union_token> <whitespace>




Subtraction                  = LowPrecedenceBinOp <subtraction_token> MidPrecedenceBinOp

subtraction_token            = "except" | "-" | "\\" | <whitespace> <subtraction_token> <whitespace>

(*;;;;;;;;;;;;;;;;;;;;;
  ; Value Expressions ;
  ;;;;;;;;;;;;;;;;;;;;;*)

<ValueExpression>            = <lpar> ValueExpression <rpar>             |
                               <whitespace> ValueExpression <whitespace> |
                               NotExpr                                   |
                               AndExpr                                   |
                               OrExpr                                    |
                               EqualsExpr                                |
                               NotEqualsExpr                             |
                               GreaterExpr                               |
                               GreaterEqualExpr                          |
                               LessExpr                                  |
                               LessEqualExpr

NotExpr                      = not_token ValueExpression

not_token                    = "¬" | "not" | <whitespace> <not_token> <whitespace>

AndExpr                      = ValueExpression <and_token> ValueExpression

and_token                    = "∧" | "&&" | "and" | <whitespace> <and_token> <whitespace>

OrExpr                       = ValueExpression <or_token> ValueExpression

or_token                     = "∨" | "||" | "or" | <whitespace> <or_token> <whitespace>

EqualsExpr                   = ColNumOrString <whitespace> <"="> <whitespace> ColNumOrString

NotEqualsExpr                = ColNumOrString <ne_token> ColNumOrString

ne_token                     = "!=" | "≠" | <whitespace> <ne_token> <whitespace>

<ColNumOrString>             = Column | number | string

GreaterExpr                  = ColNumOrString <whitespace> <">"> <whitespace> ColNumOrString

GreaterEqualExpr             = ColNumOrString <ge_token> ColNumOrString

ge_token                     = ">=" | "≥" | <whitespace> <ge_token> <whitespace>

LessExpr                     = ColNumOrString <whitespace> <"<"> <whitespace> ColNumOrString

LessEqualExpr                = ColNumOrString <le_token> ColNumOrString

le_token                     = "<=" | "≤" | <whitespace> <le_token> <whitespace>


(*;;;;;;;;;;;;;;;;;;;;
  ; common terminals ;
  ;;;;;;;;;;;;;;;;;;;;*)

<ColumnOrColumnComma>        = Column | Column <comma> ColumnOrColumnComma

ExprColumn                   = ValueExpression <right_arrow> column_token

Column                       = column_token | column_token <dot> relation_name

string                       = #"'[\w\s\-_]*'"

<column_token>               = #"[\w_]*"

number                       = #"\d+"

<comma>                      = <whitespace> "," <whitespace>

<dot>                        = "."

<whitespace>                 = #"\s*"

<relation_name>              = <whitespace> #"\w+" <whitespace>

<lpar>                       = <whitespace> "(" <whitespace>

<rpar>                       = <whitespace> ")" <whitespace>

<semicolon>                  = <whitespace> ";" <whitespace>

<star>                       = <whitespace> "*" <whitespace>

right_arrow                  = <whitespace> "->" <whitespace> | <whitespace> "→" <whitespace>

<filename>                   = #"[\w]+([.]csv)?"
