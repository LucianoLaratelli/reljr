(* grammar conventions:

- CamelCase is used for NonTerminals
- snake_case is used for terminals
when a NonTerminal introduces a new terminal, it is immediately defined
after that rule.

NonTerminals are defined in the order they are introduced, unless they are
common to more than one NonTerminal. In that case, they are defined at the
bottom of the grammar.

If any NonTerminals share a terminal, the terminal is defined before the
NonTerminals.

grammar sourced from the railroad diagrams at
https://dbis-uibk.github.io/relax/help#relalg-syntax *)

S                          = RAExpression

RAExpression               = '(' RAExpression ')'                               |
                             '(' RAExpression ')' TopLevelOperator RAExpression |
                             relation_name                                      |
                             TopLevelOperator RAExpression                      
                             (* relation_name MidLevelOperator RAExpression        | *)
                             (* TopLevelOperator RAExpression MidLevelOperator RAExpression *)

relation_name              =  #"\w"

TopLevelOperator           = Projection     |
                             Selection      |
                             RenameRelation |
                             RenameColumn   |
                             OrderBy        |
                             GroupBy        
                      



Projection                 = projection_token ColumnOrColumnComma

projection_token           = 'π' | 'pi' | 'project'




Selection                  = selection_token BooleanExpression

selection_token            = 'σ' | 'sigma' | 'select'

BooleanExpression          = '(' BooleanExpression ')' |
                             not_token BooleanExpression |

not_token                  = '¬' | 'not'



rename_token               = 'ρ' | 'rho' | 'rename'


RenameRelation             = rename_token relation_name




RenameColumn               = rename_token ColToColOrCTCComma

(* either a column name to column name (CTC) relationship or a CTC followed by a comma.*)
ColToColOrCTCComma         = Column left_arrow column_token                        |
                             Column right_arrow column_token                       |
                             Column left_arrow column_token ',' ColToColorCTCComma |
                             Column right_arrow column_token ',' ColToColorCTCComma 

left_arrow                 = '<-' | '←'
right_arrow                = '->' | '→'




OrderBy                    = order_by_token ColumnOrColumnComma |
                             order_by_token DirectionalColumnOrDCComma

order_by_token             = 'τ' | 'tau' | 'order by'

(* a column that is 'directional' is one that is followed by asc[ending] or desc[ending] *)
DirectionalColumnOrDCComma = Column asc_or_desc |
                             Column asc_or_desc ',' DirectionalColumnOrDCComma 

asc_or_desc                = 'asc' | 'ASC' | 'desc' | 'DESC'




GroupBy                    = group_by_token ';'AggregateOrAggComma |
                             group_by_token ColumnOrColumnComma ';' AggregateOrAggComma

group_by_token             = 'γ' | 'gamma' | 'group by'

AggregateOrAggComma        = 'COUNT' '(' '*' ')' right_arrow column_token                         |
                             'COUNT' '(' '*' ')' right_arrow column_token ',' AggregateOrAggComma |
                             aggregate_token '(' column_token ')' right_arrow column_token        |
                             aggregate_token '(' column_token ')' right_arrow column_token ',' AggregateOrAggComma 

aggregate_token = 'COUNT' | 'MIN' | 'MAX' | 'SUM' | 'AVG' | 'count' | 'min' | 'max' | 'sum' | 'avg' 


(* midleveloperator           = Intersection | *)
(*                              Union        | *)
(*                              Division     | *)
(*                              Subtraction  | *)
(*                              CrossProduct | *)
(*                              NaturalJoin  *)


ColumnOrColumnComma        = Column | Column ',' ColumnOrColumnComma

Column                     = column_token |
                             column_token '.' relation_name

column_token               = #'\w'
