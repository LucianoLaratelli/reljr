(* grammar conventions:

- CamelCase is used for NonTerminals
- snake_case is used for terminals
when a NonTerminal introduces a new terminal, it is immediately defined
after that rule.

NonTerminals are defined in the order they are introduced, unless they are
common to more than one NonTerminal. In that case, they are defined at the
bottom of the grammar.

If any NonTerminals share a terminal, the terminal is defined before the
NonTerminals.

grammar sourced from the railroad diagrams at
https://dbis-uibk.github.io/relax/help#relalg-syntax *)

<S>                        = RAExpression




<RAExpression> = <lpar> RAExpression <rpar> /
                 <whitespace> relation_name <whitespace>              /
                 Projection                                           /
                 Selection                                            /
                 RenameRelation                                       /
                 RenameColumn                                         /
                 OrderBy                                              /
                 GroupBy                                              (*/
                 CrossProduct                                         / 
                 NaturalJoin                                          /
                 Division                                             / 
                 Intersection                                         / 
                 Union                                                / 
                 Subtraction  *)
               



Projection                 = <projection_token> <whitespace> ColumnOrColumnComma <whitespace> RAExpression

projection_token           = 'π' | 'pi' | 'project'




Union = RAExpression <whitespace> <union_token> <whitespace> RAExpression

union_token = 'union' | '∪'




Selection                  = <selection_token> <whitespace> BooleanExpression <whitespace> RAExpression

selection_token            = 'σ' | 'sigma' | 'select'


<BooleanExpression>        = <lpar> <whitespace> BooleanExpression <rpar> |
                             NotExpr                         |
                             AndExpr                         |
                             OrExpr                          |
                             EqualsExpr                      |
                             NotEqualsExpr                   |
                             GreaterExpr                     |
                             GreaterEqualExpr                |
                             LessExpr                        |
                             LessEqualExpr

NotExpr                    = not_token <whitespace> BooleanExpression

not_token                  = '¬' | 'not'

AndExpr                    = BooleanExpression <whitespace> <and_token> <whitespace> BooleanExpression 

and_token                  = '∧' | '&&' | 'and'       

OrExpr                     = BooleanExpression <whitespace> <or_token> <whitespace> BooleanExpression 

or_token                   = '∨' | '||' | 'or'       

EqualsExpr                 = ColNumOrString <whitespace> <'='> <whitespace> ColNumOrString

NotEqualsExpr              = ColNumOrString <whitespace> ne_token <whitespace> ColNumOrString

ne_token                   = '!=' | '≠'

<ColNumOrString>           = Column | number | string

GreaterExpr                = ColNumOrString <whitespace> <'>'> <whitespace> ColNumOrString

GreaterEqualExpr           = ColNumOrString <whitespace> <ge_token> <whitespace> ColNumOrString

ge_token                   = '>=' | '≥'

LessExpr                   = ColNumOrString <whitespace> <'<'> <whitespace> ColNumOrString

LessEqualExpr              = ColNumOrString <whitespace> <le_token> <whitespace> ColNumOrString

le_token                   = '<=' | '≤' 

string                     = #"'[\w\s]*'"




rename_token               = 'ρ' | 'rho' | 'rename'


RenameRelation             = <rename_token> <whitespace> relation_name RAExpression




RenameColumn               = <rename_token> <whitespace> ColToColOrCTCComma <whitespace> RAExpression

(* either a column name to column name (CTC) relationship or a CTC followed by a comma.*)
<ColToColOrCTCComma>         = <whitespace> Column <whitespace> <right_arrow> #"\w+"                           |
                               <whitespace> Column <whitespace> <right_arrow> #"\w+" <comma> ColToColOrCTCComma 

right_arrow                = '->' | '→'


OrderBy                    = order_by_token <whitespace> ColumnOrColumnComma <whitespace> RAExpression |
                             order_by_token <whitespace> DirectionalColumnOrDCComma <whitespace> RAExpression

order_by_token             = 'τ' | 'tau' | 'order by'

(* a column that is 'directional' is one that is followed by asc[ending] or desc[ending] *)
DirectionalColumnOrDCComma = Column asc_or_desc |
                             Column asc_or_desc <whitespace> <comma> <whitespace> DirectionalColumnOrDCComma 

asc_or_desc                = 'asc' | 'ASC' | 'desc' | 'DESC'


GroupBy                    = group_by_token <whitespace> <SC> AggregateOrAggComma <whitespace> RAExpression |
                             group_by_token <whitespace> ColumnOrColumnComma <whitespace> <SC> AggregateOrAggComma <whitespace> RAExpression


group_by_token             = 'γ' | 'gamma' | 'group by'

AggregateOrAggComma        = 'COUNT' lpar '*' rpar right_arrow #"\w+"                             |
                             'COUNT' lpar '*' rpar right_arrow #"\w+" <comma> AggregateOrAggComma |
                             aggregate_token lpar #"\w+" rpar right_arrow #"\w+"                  |
                             aggregate_token lpar #"\w+" rpar right_arrow #"\w+" <comma> AggregateOrAggComma 

aggregate_token            = 'COUNT' | 'MIN' | 'MAX' | 'SUM' | 'AVG' | 'count' | 'min' | 'max' | 'sum' | 'avg' 




<ColumnOrColumnComma>      = Column | Column <whitespace> <comma> <whitespace> ColumnOrColumnComma

Column                     = #"\w+" |
                             #"\w+" <'.'> relation_name

number                     = #"\d+"

<comma>                    = <whitespace> ',' <whitespace>

<whitespace>               = #"\s*"

<relation_name>            = #"\w+"

<lpar>                     = <whitespace> '(' <whitespace>

<rpar>                     = <whitespace> ')' <whitespace>

<SC> = ';'
