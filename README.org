#+TITLE: reljr
#+AUTHOR: Elijah Malaby
#+AUTHOR: Luciano Laratelli
#+LATEX_HEADER: \usepackage[margin=.75in]{geometry}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage{unicode-math}
#+LATEX_HEADER: \setmainfont{FreeSerif}
#+LATEX_HEADER: \setlength\parindent{0pt}
#+OPTIONS: date:nil toc:nil

* Introduction
=reljr= is a relational algebra evaluator written in the [[https://clojure.org/][Clojure]] programming
language to satisfy the requirements for Project Four in the Fall 2020 session
of the Advanced Databases course offered at USF, under the instruction of [[https://www.csee.usf.edu/~tuy/][Dr.
Tu]].
* Getting =reljr=
After cloning the =reljr= repository, it can be started with =clojure -m
reljr.repl= from the top-level =reljr= directory. Alternatively, a jar can be
constructed:
#+begin_src shell
clj -Spom
clj -Xuberjar
#+end_src
Afterwards, the jar can be run with =java -jar target/uberjar/reljr.jar=.
=reljr= was developed and tested under Clojure version 1.10.0 and version
1.8.0_ 265 of OpenJDK.
* Using =reljr=
** Reading tables
- =reljr= expects input tables stored as csv files, with a header row. The headers can be written in one of two ways:
  + =<header>=, i.e. just a string
  + =<header>:<type>=, a string, then a colon, then (optionally) one of the
    following data types. If a data type is not provided, =reljr= treats the
    items in that column as strings.
    - =number= (floats)
    - =string=
- Use =read <filename>= to read a table in the directory from which you launched
  =reljr=.
  + If the filename is =bar.csv=, reljr will store the table in memory as =bar=.
  + If reljr already knows about a table with this name, it will be overwritten.
- Use =read <filename> as <tablename>= to specify the name =reljr= associates
  with a table. If the specified name already exists in memory, the table will
  be overwritten.
- Table names are /case-sensitive/, so reading =bar.csv= and =Bar.csv= will
  result in two separate tables.
- Using =store <query> as <name>= will store the table that results from a query
  (see [[Performing queries][below]]) with the given name. As always, if the name exists, the table will
  be overwritten. =store= will rename all the columns to use the new relation
  name as by the rename operator. 
- =reljr= assumes that every column in the table shares the same qualifier
  (i.e., columns =S.n= and =R.n= can't be read in from the same file.)
** Managing in-memory tables
- You can delete a table from memory with =delete <tablename>=.
- If you make changes to a table and want to update it within =reljr=, use
  =read= again.
- The =list= command will output the names of all currently loaded tables, along
  with each tables' column names.
** Performing queries
A query can be run on its own after a table load or as part of e.g. the =store=
command above. If a table does not exist, it is treated as if it were an empty
table. The result of such a query is an empty table.

=reljr= supports the following types of relational algebra queries, with the
tokens =reljr= recognizes for the operation listed after each:
- Projection (π, =pi=, =project=)
- Selection (σ, =sigma=, =select=), with the following boolean operations:
  + Not (¬, =not=)
  + And (∧, =&&=, =and=)
  + Or (∨, =||=, =or=)
  + Equality (=)
  + Inequality (≠, =!==)
  + Greater than (>)
  + Greater than or equal to (≥, =>==)
  + Less than (<)
  + Less than or equal to ( ≤, =<==)
- Renaming of a column or relation (ρ, =rho=, =rename=)
- Order by (τ, =tau=, =order by=), followed by a token to indicate the order of the column:
  + =ASC=, =asc=, =DESC=, =desc=
- Group by (γ, =gamma=, =group by=), with support for these aggregates:
  + =count(*)=
  + =count(<colname>)=
  + =min(<colname>)=
  + =max(<colname>)=
  + =sum(<colname>)=
  + =avg(<colname>)=
- Cross product (×, =*=, =cross join=)
- Inner Join(⋈, ⨝, =join=, =inner join=), with support for the same boolean
  operations as Selection
- Natural Join(⋈, ⨝, =natural join=)
- The set operations:
  + Division (÷, =/=)
  + Intersection (∩, =intersect=)
  + Union (∪, =union=)
  + Subtraction (=-=, =\\=, =except=)
  
** Writing tables
- To write a table out to a file, use =write <tablename>=. This will create a
  file =<tablename>.csv= in the same directory as =reljr=.
- =write <tablename> as <name>= will write out a file to =<name>=, where name
  can be a csv file or an extensionless file. =reljr= doesn't support any other
  file extensions.
- =write= will overwrite any files with the same name.
- If a table has two columns with the same name but which are qualified by different tables (e.g. =R.n= and =S.n=) the =write= command will write a csv with duplicate column headers. 
** Quitting =reljr=
Use =quit=.
* Implementation Details
** Parser
The grammar for the reljr parser and CLI commands is written in Extended
Backus-Naur Form (EBNF). The grammar is entirely contained within the resource
file [[file:resources/RAParser.bnf][RAParser.bnf]]. The grammar and operator precedence order for =QueryCommand=
and all its child nonterminals were developed using the [[https://dbis-uibk.github.io/relax/help][railroad diagrams ]]in the
RelaX wiki as a reference. The grammar and operator precedence for the CLI
commands are unique to =reljr=. We used the third-party [[https://github.com/engelberg/instaparse][Instaparse]] parser
generator library to construct a parser from the EBNF. Instaparse's detailed
error reporting makes it possible for =reljr= to provide much better information
about syntactic errors in user queries compared to those offered by RelaX.
*** CLI Operation Precedence
In decreasing order of precedence:
1. Reading a table from a file
2. Storing a query to a table in memory
3. Renaming an in-memory table
4. Deleting an in-memory table
5. Writing a table to a file
6. Listing all in-memory tables
7. Quitting =reljr=
8. A relational algebra expression (=RAExpression=)
*** RAExpression Precedence
These precedences are the same as those used by [[https://dbis-uibk.github.io/relax/help#relalg-operator-precedence][RelaX]]. In decreasing order of
precedence:
 1. Projection, Selection, Rename Columns, Rename Relation, Group, Order By
 2. Cross Product, Inner Join, Natural Join, Division, a relation name, an
    RAExpression within parentheses
 3. Intersection
 4. Union, Subtraction
** Preprocessor
** Interpreter
The source file [[file:src/reljr/interpreter.clj][interpeter.clj]] deals with the evaluation of relational algebra
expressions and related computations. However, the functions in this file
(notably =evaluate=) depend on the table abstraction specified in [[file:src/reljr/table.clj][table.clj]].
Because of this, it is necessary to discuss the implementation of the functions
that constitute the table abstraction before discussing the implementation of
the interpreter itself.
*** The Table Abstraction
=reljr= stores tables internally as sets of maps. This is a convenient
representation: sets trivially guarantee uniqueness of tuples and maps keep
column information close to table data. As an example, consider the table [[example_table][below]].
The Clojure code below the table shows the same table as a Clojure data
structure (assuming the table was read from the file =foo.csv=.)
#+NAME:example_table
#+caption: Table for the relation =foo=
| R.x | S.x | R.y |
|-----+-----+-----|
|   5 | 6.3 |   6 |
|   3 | 9.4 |   2 |

#+NAME: clojure_table_foo
#+begin_src clojure
{"foo"
   #{{:R/x 5 :S/x 6.3 :R/y 6}
     {:R/x 3 :S/x 9.4 :R/y 2}}}
#+end_src
**** Project

The =project= function expects to receive two arguments, =table= and =keys=. For the query =pi x,y foo= and the same data structure as [[clojure_table_foo][above]], the arguments are as follows:
#+begin_src clojure
  table = #{{:R/x 5 :S/x 6.3 :R/y 6} {:R/x 3 :S/x 9.4 :R/y 2}}
  keys = (:R/x :R/y)
#+end_src
The =project= function takes advantage of that fact that Clojure keys (e.g.
=:R/x=) can be used as functions to get the value from a map that is associated
with that key (as in =(:R/x {:R/x 2})=, which returns =2=.) =val-funcs= is then
a function that applies each of the keys to a row of the table. =map= performs
the actual iteration over table rows. The return value of this function is of
the same form as the input (a set of maps) but with only the requested columns:
#+begin_src clojure
#{#:R{:x 3, :y 2} #:R{:x 5, :y 6}}
#+end_src
**** Select

The =select= function expects to receive a table as we've seen before, as well
as a =test=, which is a predicate function. The function
[[file:src/reljr/interpreter.clj][=predicate-runner=]] handles the creation of
these predicates. With the predicate in hand, =select= filters the tuples in
=table= using the Clojure built-in =filter=, putting those tuples into a new
set, and returns.
**** Rename

The =rename= function renames a relation. It iterates through every tuple in the
table, creating a new tuple with the appropriate name. The iteration through
tuples is necessary because column names are namespaced by the table name, and
so every table member requires a rename.
**** Rename-Column

Rename column works by using the =assoc=/ =dissoc= pair of functions. =dissoc=
removes a mapping with the given key from a map, while assoc adds one. The
"thread-first", or "forward-threading", macro =->= in the call to map is
equivalent to the following expression:

#+begin_src clojure
(dissoc (assoc r to (from r)) from)
#+end_src
**** Order-Records-By

The =order-records-by= function orders the tuples in a =table= based on a set of
=col-rules=, where each =col-rule= is a pair composed of a namespaced key (a
column name, like =:R/a=) and a clojure function, which is one of the following
comparators:
#+begin_src clojure
 #(< (compare %1 %2) 0)
 #(> (compare %1 %2) 0)
#+end_src
Clojure's =compare= function performs the following (taken from [[https://clojuredocs.org/clojure.core/compare][ClojureDocs]]):
#+begin_src text
...Returns a negative number, zero, or a positive number when x is logically
'less than', 'equal to', or 'greater than' y. Same as Java x.compareTo(y) except
it also works for nil, and compares numbers and collections in a
type-independent manner....
#+end_src
These comparators are used in the =ordering= function (contained within
=order-records-by=) to determine row order. Once the =ordering= function has
been built up, it is applied to the rows of the table by =into=. =into='s
arguments are an empty =sorted-set=, whose comparator is now the entire
=ordering= function. =into= works by taking every member of =table= and adding
it to the set. When each element gets added, it is placed in the set according
to the comparator (the =ordering= function).
**** Group-Records-By

The =group-records-by= function returns a new table with the desired columns and
new columns for any aggregates requested by the user. This function relies on
the Clojure built-in =group-by=. We consider as an example the query =gamma b;
count(b) -> baz bar=, on the following relation:
#+begin_src clojure
 #{{:R/a 1, :R/b "a", :R/c "d"}
   {:R/a 4, :R/b "d", :R/c "f"}
   {:R/a 3, :R/b "c", :R/c "c"}
   {:R/a 5, :R/b "d", :R/c "b"}
   {:R/a 6, :R/b "e", :R/c "f"}}
#+end_src
Calling =group-by= on table gives the following:
#+begin_src clojure
{["a"] [{:R/a 1, :R/b "a", :R/c "d"}]
 ["d"] [{:R/a 4, :R/b "d", :R/c "f"} {:R/a 5, :R/b "d", :R/c "b"}]
 ["c"] [{:R/a 3, :R/b "c", :R/c "c"}], ["e"] [{:R/a 6, :R/b "e", :R/c "f"}]}
#+end_src
The first vector in each pair of this map is the value for the column we have
selected on; the function places it into the resulting table later on (inside of
the =map=.)
**** Cross-Product
**** Inner-Join
**** Natural-Join
*** Evaluation of Relational Algebra Expressions

* Future Work
